### Mongoose

Mongoose is an ODM library for mongoDB.

### Connecting mongoose with node js

1. Create a File db.js in the root folder.

2. The db.js file is essentially responsible for establishing a connection between your node application and 
your MongoDB database using Mongoose library.

3. To install mongoose

npm i mongoose.

### Conection step by step : (revise Daily)

1. Import Mongoose and define the MongoDB URL in the <b>db.js</b> file. First import the mongoose library and define the url to your MongoDB databse.

2. This url typically follow the format : 

`(mongodb://<hostname> : <port>/</databaseName>)`
in our code the url will be like this

mongoURL =  `mongodb://localhost:27017:/mydatabaseName`

here mydatabse name will be the name of mongoDB database.

3. Set up MongoDB Connection : Next we call mongoose.connect() to establish a connection to the MongoDB database using the url.

ex : mongoose.connect(mongoURL)

and same configuration options

(useNewUrlParser, useUnifiedTopology). 

This step initializes the connection process but does not actually connect at this point.

ex :

// establish connection

mongoose.connect(mongoURL,{

useNewUrlParser:true,

useUnifiedTopology:true

})


4. Access the default Connection Object : 

Mongoose maintain a default connection object representing the MongoDB connection. You  retrieve this object using mongoose.connection, you have stored it in the variable db. This object is what you will use to handle events and interact with the databse.

5. Define Event Listners :

You define event listners for the database connection using methods like .on(`connected`,...), .on(`error`,...), and .on(`disconnected`,...),

these events listners allow you to react diffrent states of the databse connection

6. Start listning event :

The code is set up to listen for events. When you call mongoose.connect(), Mongoose starts the connection process. If the connection is successed the .on(connected) method is triggered and you log message indicating that you are connected to MongoDB. If there is an error during connection process, the error event is triggered, and you log and error message. 
Similarly the disconncet event is useful for handling situation where connection is lost.   


7. Exports the database Connections :

Now we have to export the db object, which represent the MongoDB connection so that you can import and use it in the other part of you node js application.

summary : 

the db.js file ascts as a central module that manage the connection to your MongoDB database using mongoose. It sets up the connection, handle connection events and export the connection object so that your express.js server can use it to interact with the database.
<h3>
When you server runs it typically require or import this db.js file to establish the databse connection before handling the http requests.
</h3>

### db.js file 



```
const mongoose = require("mongoose");

// Define the MongoDB connection URL

const mongoURL = `mongodb://127.0.0.1:27017/hotels`; // replace mydatabse with your database name

// establish connection

// mongoose.connect(mongoURL, {
//   useNewUrlParser: true, // depricaiated 
//   useUnifiedTopology: true, // depriciated
// });
mongoose.connect(mongoURL);

// get default connectiom
// Mongoose maintain a default connection object representing the MongoDB connection.

const db = mongoose.connection;

// define event listners for databse connection.

db.on("connected", () => {
  console.log("Connected to MongoDB server");
});
db.on("error", (err) => {
  console.log(" MongoDB connection error : ", err);
});
db.on("disconnected", () => {
  console.log("Mongodb Disconnected : ");
});

// Export the database connection.

module.exports = db;

```


### server.js file

const express = require("express");
const app = express();

// importing db from db.js.
const db = require("./db");

// here as soon as i will run the server my db.js will also setup the mongoDB server.
// when i open my server of mongoDB : it will say connect to server
// when i close my server of mongoDB : it will say Mongodb Disconnected.

app.get("/", function (req, res) {
  res.send("<h1>welcome to my Hotel ! How can i help you.</h1>");
});

// const port = 1200;

try {
  app.listen(4000, () => {
    console.log("server is running at port 4000 ...");
  }); 
} catch (err) {
  console.log("error in creating server : ", err);
}

